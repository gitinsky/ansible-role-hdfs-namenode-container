- name: create ext volume for data
  file: state=directory path={{ ext_hadoop_volume }}

- name: create ext volume for configs
  file: state=directory path={{ ext_hadoop_conf_volume }}

- name: create ext volume for logs
  file: state=directory path={{ ext_hadoop_logs_volume }}

- name: check if a hdfs-namenode container is started
  command: bash -c "docker ps | grep hdfs-namenode"
  ignore_errors: True
  register: result

- name: start an hdfs-namenode container
  command: docker run -d
              {% if docker_net_false|default(False) %} -n=false
                 -v {{ ext_hadoop_conf_volume }}/hosts:/etc/hosts
                 -v {{ ext_hadoop_conf_volume }}/resolv.conf:/etc/resolv.conf
              {% endif %}
              -h {{ ansible_hostname }}{% if docker_net_false|default(False) %}-nn{% endif %}
              --dns {{ docker_dns_2 }}
              --dns {{ ansible_docker0.ipv4.address }}
              --dns-search node.dc1.consul
              -p={{ namenode_http_port }}:{{ namenode_http_port }}
              -p={{ namenode_rpc_port }}:{{ namenode_rpc_port }}
              -v {{ ext_hadoop_volume }}:/var/hadoop
              -v {{ ext_hadoop_conf_volume }}:/hadoop/conf
              -v {{ ext_hadoop_logs_volume }}:/var/log/hdfs
              --restart=always
              --name=hdfs-namenode gitinsky/hdfs-namenode:0.1.2
  register: docker_id
  when: result|failed

- name: start network
  shell: /root/ovswork.sh br10 {{ docker_id.stdout }} {{ network_map[ '' + ansible_hostname + '-nn' ] }}/24 {{ network_map[ '_broadcast' ] }} {{ network_map['_gateway'] }}
  when: (docker_id.changed == True) and (docker_net_false|default(False) == True)
